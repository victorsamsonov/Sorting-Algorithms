{"version":3,"sources":["logo.svg","Components/SortedLine.js","Components/MainContent.js","Algorithms/QuickSort.js","Algorithms/MergeSort.js","Components/Button.js","Components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["SortedLine","height","selected","final","id","width","index","className","style","backgroundColor","MainContent","lines","partition","arr","l","r","animations","copy","p","Math","floor","props","pivotAnimationArray","pivot","push","leftPointerAnimationArray","left","rightPointerAnimationArray","right","swapAnimation","swap","arrLeft","arrRight","items","leftIndex","rightIndex","temp","quickSort","length","mergeSort","array","helper","mainArray","leftPtr","rightPtr","middlePtr","k","i","j","merge","Button","title","func","isSelected","isSettings","disabled","onClick","undefined","Settings","vals","buttonsDisabled","useState","QUICKSORT","MERGESORT","RANDOMIZEARRAY","BUTTONSARRAY","console","log","out","button","handleButtons","App","size","WHITE","PRIMARY","TERTIARY","fadeClass","setLines","setButtonsDisabled","isSorted","setIsSorted","handleVals","random","handleSettingsClick","prop","currentArray","copyArray","slice","obj","counter","animation","shift","setTimeout","document","getElementById","handleQuickSortAnimation","currentAnimations","newArray","animationsLength","linesToSort","getElementsByClassName","ptr1","ptr2","color","newHeight","handleMergeSortAnimation","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6ca12dba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\n\r\nfunction SortedLine({height=20, selected=false, final=false, id, width, index}) {\r\n\r\n  return (\r\n    <div className=\"sorted-line\" style={{height, backgroundColor:final ?'green ':(selected ? 'red' : 'white'), width }}\r\n    id={id}>\r\n     {/* {width > 20 ? \r\n     <text>\r\n        {height}\r\n     </text>:\r\n     <></>\r\n     } */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortedLine;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport SortedLine from './SortedLine';\r\n\r\nfunction MainContent({className, lines}) {\r\n \r\n  return (\r\n    <div className={`main-wrapper ${className}`}>\r\n        {lines} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContent;","function partition (arr, l, r, animations=[], copy, finalize=false){\r\n   \r\n    var p = arr[Math.floor((r + l)/2)].props.height;\r\n    let pivotAnimationArray = {\r\n        pivot:true,\r\n        arr: copy[Math.floor((r + l)/2)],\r\n        index: Math.floor((r + l)/2)\r\n    }\r\n    animations.push(pivotAnimationArray)\r\n    while (l <= r) {\r\n    \r\n        while (arr[l].props.height < p){\r\n            let leftPointerAnimationArray = {\r\n                left:true,\r\n                arr: copy[l],\r\n                index: l\r\n            }\r\n            animations.push(leftPointerAnimationArray)\r\n            l++;\r\n        }\r\n\r\n        while (arr[r].props.height > p){\r\n            let rightPointerAnimationArray = {\r\n                right:true,\r\n                arr: copy[r],\r\n                index: r\r\n            }\r\n            animations.push(rightPointerAnimationArray)\r\n            r--; \r\n        }\r\n\r\n        if (l <= r){\r\n            let swapAnimation = {\r\n                swap:true,\r\n                arrLeft: copy[l],\r\n                arrRight: copy[r],\r\n                l,\r\n                r\r\n            }\r\n            animations.push(swapAnimation)\r\n            swap(arr, l, r);\r\n            l++;\r\n            r--;\r\n           \r\n        }\r\n     }\r\n    return l\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex){\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\n\r\nexport function quickSort(arr, l, r, animations=[], copy){\r\n    var index;\r\n   \r\n    if (arr.length > 1){\r\n        index = partition(arr, l, r, animations, copy);\r\n        \r\n        if(l < index - 1){\r\n            quickSort(arr, l, index-1, animations, copy);\r\n\r\n        }\r\n\r\n        if (index < r){\r\n            quickSort(arr, index, r, animations, copy, true);\r\n        }\r\n    }\r\n    return {arr, animations};  \r\n\r\n}\r\n\r\nexport default {quickSort}","export function oldMergeSort(arr, animations = [], copy = []) {\r\n  const index = Math.floor(arr.length / 2);\r\n  if (arr.length < 2) {\r\n    return arr;\r\n  }\r\n  const left = arr.splice(0, index);\r\n  return sort(\r\n    mergeSort(left, animations, copy),\r\n    mergeSort(arr, animations, copy),\r\n    copy,\r\n    animations\r\n  );\r\n}\r\n\r\nfunction sort(left, right, copy = [], animations = []) {\r\n  let arr = [];\r\n\r\n  while (left.length && right.length) {\r\n    if (left[0].arr.props.height < right[0].arr.props.height) {\r\n      arr.push(left.shift());\r\n    } else {\r\n      arr.push(right.shift());\r\n    }\r\n  }\r\n\r\n  return [...arr, ...left, ...right];\r\n}\r\n\r\nexport function mergeSort(array, copy, animations) {\r\n  if (array.length <= 1) return array;\r\n  helper(array, 0, array.length - 1, copy, animations);\r\n  return array\r\n}\r\n\r\n\r\nfunction helper(mainArray, leftPtr, rightPtr, copy, animations\r\n) {\r\n  if (leftPtr === rightPtr) return;\r\n  let middlePtr = Math.floor((leftPtr + rightPtr) / 2);\r\n  helper(copy, leftPtr, middlePtr, mainArray, animations);\r\n  helper(copy, middlePtr + 1, rightPtr, mainArray, animations);\r\n  merge(mainArray, leftPtr, rightPtr, middlePtr, copy, animations);\r\n}\r\n\r\nfunction merge(mainArray, leftPtr, rightPtr, middlePtr, copy, animations) {\r\n  let k = leftPtr;\r\n  let i = leftPtr;\r\n  let j = middlePtr + 1;\r\n  while (i <= middlePtr && j <= rightPtr) {\r\n    // Push values that are being compared\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (copy[i].props.height <= copy[j].props.height) {\r\n      // Update our array with element at the left Pointer\r\n      animations.push([k, copy[i].props.height]);\r\n      mainArray[k] = copy[i];\r\n      k++;\r\n      i++;\r\n    } else {\r\n      // Update our array with element at the right Pointer\r\n      animations.push([k, copy[j].props.height]);\r\n      mainArray[k] = copy[j];\r\n      k++;\r\n      j++;\r\n    }\r\n  }\r\n  while (i <= middlePtr) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    // Update our array with element at the left Pointer\r\n    animations.push([k, copy[i].props.height]);\r\n    mainArray[k] = copy[i];\r\n    i++;\r\n    k++\r\n  }\r\n  while (j <= rightPtr) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    // Update our array with element at the right Pointer\r\n    animations.push([k, copy[j].props.height]);\r\n    mainArray[k] = copy[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\n\r\nexport default { mergeSort };","import React, {useState, useEffect} from 'react'\r\n\r\nfunction Button({title, func, isSelected=true, isSettings=false, disabled}) {\r\n  \r\n  return (\r\n    <div  className={`button ${isSelected ? 'is-selected' : ''} ${isSettings ? 'is-settings' : ''} ${disabled ? 'is-disabled' : ''}`} onClick={disabled ? undefined : func}>\r\n        <h1 className='button-text'>\r\n            {title}\r\n        </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {quickSort} from '../Algorithms/QuickSort'\r\nimport { mergeSort } from '../Algorithms/MergeSort';\r\nimport Button from './Button';\r\nimport QuickSort from '../Algorithms/QuickSort';\r\n\r\nfunction Settings({vals, onClick, buttonsDisabled}) {\r\n  const [disabled, setDisabled] = useState(buttonsDisabled)\r\n  const QUICKSORT = 'Quick Sort';\r\n  const MERGESORT = 'Merge Sort';\r\n  const HEAPSORT = 'Heap Sort';\r\n  const RANDOMIZEARRAY = 'Randomize Array';\r\n  const BUTTONSARRAY = [\r\n    {title:QUICKSORT, isSelected:false, func:()=>onClick(QUICKSORT), disabled:buttonsDisabled}, \r\n    {title:MERGESORT, isSelected:false, func:()=>onClick(MERGESORT), disabled:buttonsDisabled},\r\n    {title:HEAPSORT, isSelected:false, func:()=>console.log(20), disabled:buttonsDisabled},\r\n    {title:'About Sorting Algorithms', isSelected:true, func:()=>console.log(20), disabled:buttonsDisabled},\r\n    {title:RANDOMIZEARRAY, isSelected:false, func:()=>onClick(RANDOMIZEARRAY), isSettings: true, disabled:buttonsDisabled }\r\n  ];\r\n\r\n const handleButtons = () => {\r\n     let out = []\r\n     for (let button of BUTTONSARRAY){\r\n        out.push(\r\n            <Button disabled={button.disabled} title={button.title} isSelected={button.isSelected} isSettings={button.isSettings} func={button.func}/>\r\n        )\r\n     }\r\n     return out\r\n }\r\n \r\n  return (\r\n    <div className=\"settings-wrapper\">\r\n       {handleButtons()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MainContent from \"./Components/MainContent\";\nimport Settings from \"./Components/Settings\";\nimport SortedLine from \"./Components/SortedLine\";\nimport { quickSort } from \"./Algorithms/QuickSort\";\nimport { mergeSort, getMergeSortAnimations } from \"./Algorithms/MergeSort\";\n\nfunction App() {\n  const [size, setSize] = useState(500);\n  const WIDTH = 550;\n  // Constant for setTimeout() animations\n  const DT = 5;\n\n  const QUICKSORT = \"Quick Sort\";\n  const RANDOMIZEARRAY = \"Randomize Array\";\n  const MERGESORT = \"Merge Sort\";\n  const WHITE = \"white\";\n  const HEAPSORT = \"Heap Sort\";\n  // Colors\n  const PRIMARY = \"#009DAE\";\n  const SECONDARY = \"#30DD92\";\n  const TERTIARY = \"#8843F2\";\n  const [fadeClass, setFadeClass] = useState(\"fade\");\n  const [vals, setVals] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [currAnimations, setAnimations] = useState();\n  const [idCounter, setidCounter] = useState(0);\n  const [buttonsDisabled, setButtonsDisabled] = useState(false);\n  const [isSorted, setIsSorted] = useState(false);\n\n  const randFunc = () => {\n    return Math.floor(Math.random() * 100) + 1;\n  };\n\n  const transformArray = (array) => {\n    let out = [];\n    for (let e of array)\n      out.push({\n        position: e.props.index,\n        arr: e,\n      });\n    return out;\n  };\n\n  // Used to initialize the lines that are going to get sorted\n  const handleVals = () => {\n    setIsSorted(false);\n    let vals = [];\n    let out = [];\n    for (let i = 0; i < size; i++)\n      out.push(\n        <SortedLine\n          height={randFunc() * 5 + 5}\n          key={i}\n          id={i}\n          index={i}\n          selected={false}\n          width={WIDTH / size}\n        />\n      );\n    return out;\n  };\n\n  const handleQuickSortAnimation = () => {\n    let currentAnimations = [];\n    let currentArray = lines;\n    let copyArray = lines.slice();\n    let obj = quickSort(\n      currentArray,\n      0,\n      currentArray.length - 1,\n      currentAnimations,\n      copyArray\n    );\n    let animations = obj.animations;\n    let newArray = obj.arr;\n    // Used to determine the duration of an animation being updated\n    let counter = 1;\n    // Rate of animations being updated\n    let dt = DT;\n    // Iterates through an array containing all the animations that occured during quickSort()\n    while (animations.length) {\n      let animation = animations.shift();\n      // Handles the current pivot animation (purple)\n      if (animation.pivot) {\n        setTimeout(() => {\n          document.getElementById(\n            animation.arr.props.id\n          ).style.backgroundColor = TERTIARY;\n        }, counter * dt);\n      }\n      // Handles the current left element animation (cyan)\n      if (animation.left) {\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = PRIMARY),\n          counter * dt\n        );\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = \"white\"),\n          (counter + 1) * dt\n        );\n      }\n      // Handles the current right element animation (cyan)\n      if (animation.right) {\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = PRIMARY),\n          counter * dt\n        );\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = \"white\"),\n          (counter + 1) * dt\n        );\n      }\n      // Animates the two elements being swapped (colors them green)\n      if (animation.swap) {\n        setTimeout(() => {\n          document.getElementById(\n            animation.arrLeft.props.id\n          ).style.backgroundColor = PRIMARY;\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.backgroundColor = PRIMARY;\n          let temp = document.getElementById(animation.arrLeft.props.id).style\n            .height;\n          document.getElementById(animation.arrLeft.props.id).style.height = `${\n            document.getElementById(animation.arrRight.props.id).style.height\n          }`;\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.height = `${temp}`;\n        }, counter * dt);\n\n        setTimeout(() => {\n          document.getElementById(\n            animation.arrLeft.props.id\n          ).style.backgroundColor = \"white\";\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.backgroundColor = \"white\";\n        }, (counter + 1) * dt);\n      }\n      counter++;\n      // Buttons enabled once again since the animation is over\n      if (!animations.length) {\n        setTimeout(() => {\n          setButtonsDisabled(false);\n          setIsSorted(true);\n          console.log(\"yessir\");\n        }, (counter + 2) * dt);\n      }\n    }\n    setLines([copyArray]);\n  };\n\n  const handleMergeSortAnimation = () => {\n    let currentArray = lines.slice();\n    let copy = lines.slice();\n    let currentAnimations = [];\n    let newArray = mergeSort(currentArray, copy, currentAnimations);\n    let animationsLength = currentAnimations.length;\n    let linesToSort = document.getElementsByClassName(\"sorted-line\");\n    // Loops throught the animation array\n    for (let i = 0; i < animationsLength; i++) {\n      let isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        let [ptr1, ptr2] = currentAnimations[i];\n        let color = i % 3 === 0 ? TERTIARY : WHITE;\n        setTimeout(() => {\n          linesToSort[ptr1].style.backgroundColor = color;\n          linesToSort[ptr2].style.backgroundColor = color;\n        }, i * DT);\n      } else {\n        setTimeout(() => {\n          let [ptr1, newHeight] = currentAnimations[i];\n          linesToSort[ptr1].style.height = `${newHeight}px`;\n        }, i * DT);\n      }\n    }\n    // Resets the Lines color to white\n    setTimeout(() => {\n      setButtonsDisabled(false);\n      setIsSorted(true);\n      for (let sortedLine of linesToSort)\n        sortedLine.style.backgroundColor = WHITE;\n      setLines([newArray]);\n    }, DT * animationsLength);\n  };\n\n  // Handles the buttons clicked in the header (determines whether to randomize, perform an algorithm or display more info about sorting algorithms)\n  function handleSettingsClick(prop) {\n    // Randomizes Array\n    if (prop == RANDOMIZEARRAY) {\n      setLines([]);\n      setLines(handleVals());\n    } else if (prop === QUICKSORT) {\n      handleQuickSortAnimation();\n    } else if (prop === MERGESORT) {\n      handleMergeSortAnimation();\n    }\n  }\n  useEffect(() => {\n    setLines(handleVals());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\"> Sorting Visualizer</h1>\n        <Settings\n          onClick={(out) => {\n            // Disables the buttons since an animation is taking place\n            if (out !== RANDOMIZEARRAY && !isSorted) {\n              setButtonsDisabled(true);\n              handleSettingsClick(out);\n            } else if (out === RANDOMIZEARRAY) {\n              handleSettingsClick(out);\n            }\n          }}\n          buttonsDisabled={buttonsDisabled}\n        />\n      </header>\n      <div className=\"body\">\n        {isSorted ? (\n          <text className=\"sorted-text\">\n            The Array is Sorted, please generate a new array\n          </text>\n        ) : (\n          <>\n            <text className=\"sorted-text\"></text>\n          </>\n        )}\n        <MainContent className={fadeClass} lines={lines} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}