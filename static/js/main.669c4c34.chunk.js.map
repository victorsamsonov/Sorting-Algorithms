{"version":3,"sources":["logo.svg","Components/SortedLine.js","Components/MainContent.js","Algorithms/QuickSort.js","Algorithms/MergeSort.js","Components/Button.js","Components/Settings.js","Components/Configuration.js","Algorithms/HeapSort.js","App.js","reportWebVitals.js","index.js"],"names":["SortedLine","height","selected","final","id","width","index","className","style","backgroundColor","MainContent","lines","useState","currentLines","setCurrentLines","useEffect","partition","arr","l","r","animations","copy","p","Math","floor","props","pivotAnimationArray","pivot","push","leftPointerAnimationArray","left","rightPointerAnimationArray","right","swapAnimation","swap","arrLeft","arrRight","items","leftIndex","rightIndex","temp","quickSort","length","mergeSort","array","helper","mainArray","leftPtr","rightPtr","middlePtr","k","i","j","merge","Button","title","func","isSelected","isSettings","disabled","animation","animationButton","onClick","undefined","Settings","vals","buttonsDisabled","QUICKSORT","MERGESORT","HEAPSORT","RANDOMIZEARRAY","BUTTONSARRAY","console","log","out","button","handleButtons","Configuration","currentSpeed","currentSize","speedFunc","sizeFunc","animationFunc","speedValue","setSpeedValue","sizeValue","setSizeValue","defaultValue","max","onChange","value","color","MAXSIZE","min","heapify","len","idx","currentAnimations","arr1","arr2","type","HeapSort","LENGTH","App","WHITE","PRIMARY","SECONDARY","TERTIARY","fadeClass","setLines","setButtonsDisabled","setAnimation","isSorted","setIsSorted","DT","setDT","size","setSize","handleVals","random","handleQuickSortAnimation","currentArray","copyArray","slice","obj","counter","dt","shift","setTimeout","document","getElementById","handleSettingsClick","prop","newArray","animationsLength","linesToSort","getElementsByClassName","ptr1","ptr2","newHeight","handleMergeSortAnimation","pop","arr2Height","arr1Height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.669c4c34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\n\r\nfunction SortedLine({height=20, selected=false, final=false, id, width, index}) {\r\n\r\n  return (\r\n    <div className=\"sorted-line\" style={{height, backgroundColor:final ?'green ':(selected ? 'red' : 'white'), width }}\r\n    id={id}>\r\n     {/* {width > 20 ? \r\n     <text>\r\n        {height}\r\n     </text>:\r\n     <></>\r\n     } */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortedLine;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport SortedLine from './SortedLine';\r\n\r\nfunction MainContent({className, lines}) {\r\n  const [currentLines, setCurrentLines] = useState(lines)\r\n  useEffect (()=>{\r\n    setCurrentLines(lines)\r\n  }, [lines])\r\n  return (\r\n    <div className={`main-wrapper ${className}`}>\r\n        {currentLines} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContent;","function partition (arr, l, r, animations=[], copy, finalize=false){\r\n   \r\n    var p = arr[Math.floor((r + l)/2)].props.height;\r\n    let pivotAnimationArray = {\r\n        pivot:true,\r\n        arr: copy[Math.floor((r + l)/2)],\r\n        index: Math.floor((r + l)/2)\r\n    }\r\n    animations.push(pivotAnimationArray)\r\n    while (l <= r) {\r\n    \r\n        while (arr[l].props.height < p){\r\n            let leftPointerAnimationArray = {\r\n                left:true,\r\n                arr: copy[l],\r\n                index: l\r\n            }\r\n            animations.push(leftPointerAnimationArray)\r\n            l++;\r\n        }\r\n\r\n        while (arr[r].props.height > p){\r\n            let rightPointerAnimationArray = {\r\n                right:true,\r\n                arr: copy[r],\r\n                index: r\r\n            }\r\n            animations.push(rightPointerAnimationArray)\r\n            r--; \r\n        }\r\n\r\n        if (l <= r){\r\n            let swapAnimation = {\r\n                swap:true,\r\n                arrLeft: copy[l],\r\n                arrRight: copy[r],\r\n                l,\r\n                r\r\n            }\r\n            animations.push(swapAnimation)\r\n            swap(arr, l, r);\r\n            l++;\r\n            r--;\r\n           \r\n        }\r\n     }\r\n    return l\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex){\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\n\r\nexport function quickSort(arr, l, r, animations=[], copy){\r\n    var index;\r\n   \r\n    if (arr.length > 1){\r\n        index = partition(arr, l, r, animations, copy);\r\n        \r\n        if(l < index - 1){\r\n            quickSort(arr, l, index-1, animations, copy);\r\n\r\n        }\r\n\r\n        if (index < r){\r\n            quickSort(arr, index, r, animations, copy, true);\r\n        }\r\n    }\r\n    return {arr, animations};  \r\n\r\n}\r\n\r\nexport default {quickSort}","export function oldMergeSort(arr, animations = [], copy = []) {\r\n  const index = Math.floor(arr.length / 2);\r\n  if (arr.length < 2) {\r\n    return arr;\r\n  }\r\n  const left = arr.splice(0, index);\r\n  return sort(\r\n    mergeSort(left, animations, copy),\r\n    mergeSort(arr, animations, copy),\r\n    copy,\r\n    animations\r\n  );\r\n}\r\n\r\nfunction sort(left, right, copy = [], animations = []) {\r\n  let arr = [];\r\n\r\n  while (left.length && right.length) {\r\n    if (left[0].arr.props.height < right[0].arr.props.height) {\r\n      arr.push(left.shift());\r\n    } else {\r\n      arr.push(right.shift());\r\n    }\r\n  }\r\n\r\n  return [...arr, ...left, ...right];\r\n}\r\n\r\nexport function mergeSort(array, copy, animations) {\r\n  if (array.length <= 1) return array;\r\n  helper(array, 0, array.length - 1, copy, animations);\r\n  return array\r\n}\r\n\r\n\r\nfunction helper(mainArray, leftPtr, rightPtr, copy, animations\r\n) {\r\n  if (leftPtr === rightPtr) return;\r\n  let middlePtr = Math.floor((leftPtr + rightPtr) / 2);\r\n  helper(copy, leftPtr, middlePtr, mainArray, animations);\r\n  helper(copy, middlePtr + 1, rightPtr, mainArray, animations);\r\n  merge(mainArray, leftPtr, rightPtr, middlePtr, copy, animations);\r\n}\r\n\r\nfunction merge(mainArray, leftPtr, rightPtr, middlePtr, copy, animations) {\r\n  let k = leftPtr;\r\n  let i = leftPtr;\r\n  let j = middlePtr + 1;\r\n  while (i <= middlePtr && j <= rightPtr) {\r\n    // Push values that are being compared\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (copy[i].props.height <= copy[j].props.height) {\r\n      // Update our array with element at the left Pointer\r\n      animations.push([k, copy[i].props.height, i]);\r\n      mainArray[k] = copy[i];\r\n      k++;\r\n      i++;\r\n    } else {\r\n      // Update our array with element at the right Pointer\r\n      animations.push([k, copy[j].props.height, j]);\r\n      mainArray[k] = copy[j];\r\n      k++;\r\n      j++;\r\n    }\r\n  }\r\n  while (i <= middlePtr) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    // Update our array with element at the left Pointer\r\n    animations.push([k, copy[i].props.height, i]);\r\n    mainArray[k] = copy[i];\r\n    i++;\r\n    k++\r\n  }\r\n  while (j <= rightPtr) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    // Update our array with element at the right Pointer\r\n    animations.push([k, copy[j].props.height, j]);\r\n    mainArray[k] = copy[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\n\r\nexport default { mergeSort };","import React, {useState, useEffect} from 'react'\r\n\r\nfunction Button({title, func, isSelected=true, isSettings=false, disabled, animation, animationButton}) {\r\n  \r\n  return (\r\n    <button  className={`button ${isSelected ? 'is-selected' : ''} ${isSettings ? 'is-settings' : ''} ${disabled ? 'is-disabled' : ''}\r\n    ${animation ? 'is-animation' : ''}\r\n    ${animationButton ? 'animation-button' : ''}`} \r\n    onClick={disabled ? undefined : func}>\r\n        <h1 className='button-text'>\r\n            {title}\r\n        </h1>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {quickSort} from '../Algorithms/QuickSort'\r\nimport { mergeSort } from '../Algorithms/MergeSort';\r\nimport Button from './Button';\r\nimport QuickSort from '../Algorithms/QuickSort';\r\n\r\nfunction Settings({vals, onClick, buttonsDisabled}) {\r\n  const [disabled, setDisabled] = useState(buttonsDisabled)\r\n  const QUICKSORT = 'Quick Sort';\r\n  const MERGESORT = 'Merge Sort';\r\n  const HEAPSORT = 'Heap Sort';\r\n  const RANDOMIZEARRAY = 'Randomize Array';\r\n  const BUTTONSARRAY = [\r\n    {title:QUICKSORT, isSelected:false, func:()=>onClick(QUICKSORT), disabled:buttonsDisabled}, \r\n    {title:MERGESORT, isSelected:false, func:()=>onClick(MERGESORT), disabled:buttonsDisabled},\r\n    {title:HEAPSORT, isSelected:false, func:()=>onClick(HEAPSORT), disabled:buttonsDisabled},\r\n    {title:'About Sorting Algorithms', isSelected:true, func:()=>console.log(20), disabled:buttonsDisabled},\r\n    {title:RANDOMIZEARRAY, isSelected:false, func:()=>onClick(RANDOMIZEARRAY), isSettings: true, disabled:buttonsDisabled }\r\n  ];\r\n\r\n const handleButtons = () => {\r\n     let out = []\r\n     for (let button of BUTTONSARRAY){\r\n        out.push(\r\n            <Button disabled={button.disabled} title={button.title} isSelected={button.isSelected} isSettings={button.isSettings} func={button.func}/>\r\n        )\r\n     }\r\n     return out\r\n }\r\n \r\n  return (\r\n    <div className=\"settings-wrapper\">\r\n       {handleButtons()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\nimport Button from './Button';\r\nimport { Slider } from 'material-ui-slider';\r\n\r\nfunction Configuration({ buttonsDisabled, currentSpeed, currentSize, speedFunc, sizeFunc, animation, animationFunc }) {\r\n    const MAXSPEED = 1500;\r\n    const MAXSIZE = 400;\r\n    const [speedValue, setSpeedValue] = useState(currentSpeed);\r\n    const [sizeValue, setSizeValue] = useState(currentSize);\r\n\r\n    const handleSpeedChange = (value) => {\r\n        setSpeedValue(value)\r\n        speedFunc(MAXSPEED - value)\r\n    }\r\n\r\n    const handleSizeChange = (value) => {\r\n        setSizeValue(value)\r\n        sizeFunc(value)\r\n    }\r\n\r\n  // useEffect (()=>{\r\n  //   setSpeedValue(MAXSPEED - currentSpeed)\r\n  // }, [currentSpeed])\r\n\r\n  return (\r\n    <div className=\"configuration-wrapper\">\r\n       <div className='configuration-section'>\r\n            <text className=\"configuration-title\">\r\n                Sorting Speed\r\n            </text>\r\n            <Slider defaultValue={speedValue}\r\n                max={MAXSPEED}\r\n                onChange={handleSpeedChange}\r\n                value={currentSpeed}\r\n                color='#3369ff'\r\n                disabled={buttonsDisabled}\r\n            />\r\n       </div>\r\n       <div className='configuration-section'>\r\n       <text className=\"configuration-title\">\r\n                Array Size {sizeValue}\r\n            </text>\r\n            <Slider defaultValue={sizeValue}\r\n                max={MAXSIZE+1}\r\n                onChange={handleSizeChange}\r\n                min={1}\r\n                color='#3369ff'\r\n                disabled={buttonsDisabled}\r\n\r\n            />\r\n       </div>\r\n       <div className='configuration-section'>\r\n       <text className=\"configuration-title\">\r\n                Animations are {animation? 'ON' : 'OFF'}\r\n            </text>\r\n            <Button animation={!animation} \r\n                title={\"Animation\"} \r\n                func={() => animationFunc()}\r\n                animationButton={true}\r\n                disabled={buttonsDisabled}\r\n            />\r\n       </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Configuration;","function heapify(array, len, idx, currentAnimations) {\r\n  let l = 2 * idx + 1;\r\n  let r = 2 * idx + 2;\r\n  let max = idx;\r\n\r\n  if (l < len && array[l].props.height > array[max].props.height) max = l;\r\n\r\n  if (r < len && array[r].props.height > array[max].props.height) max = r;\r\n\r\n  if (max !== idx) {\r\n    let animation = {\r\n      arr1: array[idx],\r\n      arr2: array[max],\r\n      type:'max'\r\n    }\r\n    currentAnimations.push(animation)\r\n    let temp = array[idx];\r\n    array[idx] = array[max];\r\n    array[max] = temp;\r\n    \r\n    heapify(array, len, max, currentAnimations);\r\n  }\r\n}\r\n\r\nfunction HeapSort(arr, copy, currentAnimations) {\r\n  const LENGTH = arr.length;\r\n  let idx = Math.floor(LENGTH / 2 - 1);\r\n  let k = LENGTH - 1;\r\n\r\n  while (idx >= 0) {\r\n    heapify(arr, LENGTH, idx, currentAnimations);\r\n    idx--;\r\n  }\r\n\r\n  while (k >= 0) {\r\n    //   [arr[0], arr[k]] = [arr[k], arr[0]]\r\n    let animation = {\r\n      arr1: arr[k],\r\n      arr2: arr[0],\r\n      type: 'min'\r\n    }\r\n    currentAnimations.push(animation)\r\n    let temp = arr[k];\r\n    arr[k] = arr[0];\r\n    arr[0] = temp;\r\n    \r\n    heapify(arr, k, 0, currentAnimations);\r\n    k--;\r\n  }\r\n\r\n  // console.log(arr);\r\n  return arr;\r\n}\r\n\r\nexport default HeapSort;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MainContent from \"./Components/MainContent\";\nimport Settings from \"./Components/Settings\";\nimport Configuration from \"./Components/Configuration\";\nimport SortedLine from \"./Components/SortedLine\";\nimport { quickSort } from \"./Algorithms/QuickSort\";\nimport { mergeSort, getMergeSortAnimations } from \"./Algorithms/MergeSort\";\nimport { Slider } from \"material-ui-slider\";\nimport HeapSort from \"./Algorithms/HeapSort\";\n\nfunction App() {\n  const WIDTH = 550;\n  const DEFAULT_DT = 70;\n  // Constant for setTimeout() animations\n  const QUICKSORT = \"Quick Sort\";\n  const RANDOMIZEARRAY = \"Randomize Array\";\n  const MERGESORT = \"Merge Sort\";\n  const WHITE = \"white\";\n  const HEAPSORT = \"Heap Sort\";\n  // Colors\n  const PRIMARY = \"#AEFEFF\";\n  const SECONDARY = \"#30C785\";\n  const TERTIARY = \"#800080\";\n  const [fadeClass, setFadeClass] = useState(\"fade\");\n  const [vals, setVals] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [currAnimations, setAnimations] = useState();\n  const [idCounter, setidCounter] = useState(0);\n  const [buttonsDisabled, setButtonsDisabled] = useState(false);\n  const [animation, setAnimation] = useState(true);\n  const [isSorted, setIsSorted] = useState(false);\n  const [DT, setDT] = useState(DEFAULT_DT);\n  const [size, setSize] = useState(50);\n  const [isSorting, setIsSorting] = useState(false);\n  const randFunc = () => {\n    return Math.floor(Math.random() * 100) + 1;\n  };\n\n  const transformArray = (array) => {\n    let out = [];\n    for (let e of array)\n      out.push({\n        position: e.props.index,\n        arr: e,\n      });\n    return out;\n  };\n\n  // Settings section that determine if animations are on or off\n  const handleAnimationChange = () => {\n    if (animation) {\n      setDT(0);\n      setAnimation(false);\n    } else {\n      setDT(DEFAULT_DT);\n      setAnimation(true);\n    }\n  };\n\n  // Used to initialize the lines that are going to get sorted\n  const handleVals = () => {\n    setIsSorted(false);\n    let vals = [];\n    let out = [];\n    for (let i = 0; i < size; i++)\n      out.push(\n        <SortedLine\n          height={randFunc() * 5 + 5}\n          key={i}\n          id={i}\n          index={i}\n          selected={false}\n          width={WIDTH / size}\n        />\n      );\n    return out;\n  };\n\n  const handleQuickSortAnimation = () => {\n    let currentAnimations = [];\n    let currentArray = lines;\n    let copyArray = lines.slice();\n    let obj = quickSort(\n      currentArray,\n      0,\n      currentArray.length - 1,\n      currentAnimations,\n      copyArray\n    );\n    setLines([copyArray]);\n    let animations = obj.animations;\n    let newArray = obj.arr;\n    // Used to determine the duration of an animation being updated\n    let counter = 1;\n    // Rate of animations being updated\n    let dt = DT;\n    let LEN = animations.length;\n    // Iterates through an array containing all the animations that occured during quickSort()\n    while (animations.length) {\n      let animation = animations.shift();\n      // Handles the current pivot animation (purple)\n      if (animation.pivot) {\n        setTimeout(() => {\n          document.getElementById(\n            animation.arr.props.id\n          ).style.backgroundColor = TERTIARY;\n        }, counter * dt);\n      }\n      // Handles the current left element animation (cyan)\n      if (animation.left) {\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = PRIMARY),\n          counter * dt\n        );\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = \"white\"),\n          (counter + 1) * dt\n        );\n      }\n      // Handles the current right element animation (cyan)\n      if (animation.right) {\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = PRIMARY),\n          counter * dt\n        );\n        setTimeout(\n          () =>\n            (document.getElementById(\n              animation.arr.props.id\n            ).style.backgroundColor = \"white\"),\n          (counter + 1) * dt\n        );\n      }\n      // Animates the two elements being swapped (colors them green)\n      if (animation.swap) {\n        setTimeout(() => {\n          document.getElementById(\n            animation.arrLeft.props.id\n          ).style.backgroundColor = PRIMARY;\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.backgroundColor = PRIMARY;\n          let temp = document.getElementById(animation.arrLeft.props.id).style\n            .height;\n          document.getElementById(animation.arrLeft.props.id).style.height = `${\n            document.getElementById(animation.arrRight.props.id).style.height\n          }`;\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.height = `${temp}`;\n        }, counter * dt);\n\n        setTimeout(() => {\n          document.getElementById(\n            animation.arrLeft.props.id\n          ).style.backgroundColor = \"white\";\n          document.getElementById(\n            animation.arrRight.props.id\n          ).style.backgroundColor = \"white\";\n        }, (counter + 1) * dt);\n      }\n      counter++;\n      // Buttons enabled once again since the animation is over\n      if (!animations.length) {\n        setTimeout(() => {\n          setButtonsDisabled(false);\n          setIsSorted(true);\n        }, counter * dt);\n      }\n    }\n  };\n\n  const handleMergeSortAnimation = () => {\n    let currentArray = lines.slice();\n    let copy = lines.slice();\n    let currentAnimations = [];\n    let newArray = mergeSort(currentArray, copy, currentAnimations);\n    let animationsLength = currentAnimations.length;\n    let linesToSort = document.getElementsByClassName(\"sorted-line\");\n    // Loops throught the animation array\n    for (let i = 0; i < animationsLength; i++) {\n      let isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        let [ptr1, ptr2] = currentAnimations[i];\n        let color = i % 3 === 0 ? TERTIARY : WHITE;\n        setTimeout(() => {\n          linesToSort[ptr1].style.backgroundColor = color;\n          linesToSort[ptr2].style.backgroundColor = color;\n        }, i * DT);\n      } else {\n        setTimeout(() => {\n          let [ptr1, newHeight, ptr2] = currentAnimations[i];\n          console.log(ptr1, ptr2);\n          let temp = linesToSort[ptr1].style.height;\n          console.log(temp, newHeight);\n          linesToSort[ptr1].style.height = `${newHeight}px`;\n          if (newHeight !== temp) linesToSort[ptr2].style.height = `${temp}px`;\n        }, i * DT);\n      }\n    }\n    // Resets the Lines color to white\n    setTimeout(() => {\n      setButtonsDisabled(false);\n      setIsSorted(true);\n      for (let sortedLine of linesToSort)\n        sortedLine.style.backgroundColor = WHITE;\n      setLines([newArray]);\n    }, DT * animationsLength);\n  };\n\n  // Handles the buttons clicked in the header (determines whether to randomize, perform an algorithm or display more info about sorting algorithms)\n  function handleSettingsClick(prop) {\n    console.log(prop);\n    // Randomizes Array\n    if (prop == RANDOMIZEARRAY) {\n      setLines([]);\n      setLines(handleVals());\n    } else if (prop === QUICKSORT) {\n      setButtonsDisabled(true);\n      setTimeout(handleQuickSortAnimation, 1);\n    } else if (prop === MERGESORT) {\n      setButtonsDisabled(true);\n      handleMergeSortAnimation();\n    } else if (prop == HEAPSORT) {\n      setButtonsDisabled(true);\n      let currentArray = lines.slice();\n      let copy = lines.slice();\n      let currentAnimations = [];\n      let newArray = HeapSort(currentArray, copy, currentAnimations);\n      let counter = 0;\n      while (currentAnimations.length) {\n        let animation = currentAnimations.pop();\n        let { arr1, arr2, type } = animation;\n        if (arr1.props.id !== arr2.props.id) {\n          arr1 = document.getElementById(arr1.props.id);\n          arr2 = document.getElementById(arr2.props.id);\n          setTimeout(() => {\n            let arr2Height = arr2.style.height;\n            let arr1Height = arr1.style.height;\n            // Swap the height values\n            arr1.style.height = arr2Height;\n            arr2.style.height = arr1Height;\n            arr1.style.backgroundColor = type === 'min' ? SECONDARY : PRIMARY\n            arr2.style.backgroundColor = type === 'min' ? SECONDARY : PRIMARY\n\n            console.log();\n          }, DT * counter);\n\n          setTimeout(() => {\n            arr1.style.backgroundColor = WHITE;\n            arr2.style.backgroundColor = WHITE;\n          }, DT * (counter+1));\n        }\n\n        if (!currentAnimations.length) {\n          setTimeout(() => {\n            setButtonsDisabled(false)\n            setIsSorted(true)\n            setLines([newArray])\n          }, DT * counter);\n        }\n        counter++;\n      }\n    }\n  }\n\n  useEffect(() => {\n    setLines(handleVals());\n  }, [size]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\"> Sorting Visualizer</h1>\n        <Settings\n          onClick={(out) => {\n            // Disables the buttons since an animation is taking place\n            if (out !== RANDOMIZEARRAY && !isSorted && lines.length !== 1) {\n              handleSettingsClick(out);\n            } else if (out === RANDOMIZEARRAY) {\n              handleSettingsClick(out);\n            }\n          }}\n          buttonsDisabled={buttonsDisabled}\n        />\n      </header>\n      <div className=\"body\">\n        {isSorted ? (\n          <text className=\"sorted-text\">\n            The Array is Sorted, please generate a new array\n          </text>\n        ) : (\n          <>\n            <text className=\"sorted-text\"></text>\n          </>\n        )}\n        <MainContent className={fadeClass} lines={lines} />\n        <header className=\"bottom-header\">\n          <h1 className=\"title\"> Settings </h1>\n          <Configuration\n            currentSpeed={1500 - DT}\n            currentSize={size}\n            speedFunc={(value) => setDT(value)}\n            buttonsDisabled={buttonsDisabled}\n            sizeFunc={(value) => {\n              setSize(value);\n            }}\n            animation={animation}\n            animationButton={true}\n            animationFunc={handleAnimationChange}\n          />\n        </header>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}